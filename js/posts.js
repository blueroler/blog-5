// L·∫•y ID b√†i vi·∫øt t·ª´ URL
const urlParams = new URLSearchParams(window.location.search);
const get_topic = urlParams.get('topic');
const postId = urlParams.get('id');

const count_sub_post = 8; // l·∫•y s·ªë l∆∞·ª£ng b√†i vi·∫øt trong ph·∫ßn sub 

show_list();

if (postId == 'null') {
  show_topic();

  updateBox2Height();
} else {
  show_posts();
  updateBox2Height();
  show_foot_content();
}

/////////////////////////////////////////////////////////////////////////////////////

function show_foot_content() {
  const show_foot_content = document.getElementById('foot-content');
  show_foot_content.innerHTML = `
    <div class="sub-section" id="${get_topic}-section"></div>
    `;
  show_next_content();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////

function show_posts() {
  const show_posts = document.getElementById('posts-content');
  show_posts.innerHTML = `
    <div id="posts-title"></div>
    <div class="calc-posts" id="body-posts"></div>`;
  posts_id()
}

async function posts_id() {
  const dataContainer = document.getElementById('posts-title');
  try {
    const response = await fetch(`${databaseUrl}/news/${postId}.json`);
    const post = await response.json();
    let htmlContent = '';
    if (post.status === "public") {
      htmlContent =
        `<div class="posts-title">
                    <h4>${post.topic}</h4>
                    <small>Ng√†y ƒëƒÉng: ${new Date(post.timestamp).toLocaleString()}</small>
                </div>
                <h1>${textOutput(post.name)}</h1>
            `;
      dataContainer.innerHTML = htmlContent;
      fetchAndDisplayData();
    } else { shows_error(); }
  } catch (error) { shows_error(); }
}

async function fetchAndDisplayData() {
  const fetchUrl = `${databaseUrl}/news/${postId}.json`;
  try {
    const response = await fetch(fetchUrl);
    if (!response.ok) {
      alert('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Firebase.');
      return;
    }

    const data = await response.json(); // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu JSON t·ª´ ph·∫£n h·ªìi
    const dataContainer = document.getElementById('body-posts'); // L·∫•y th·∫ª div c√≥ id l√† tbody
    let htmlContent = '';

    for (const key in data) {
      const { field, value } = data[key]; // L·∫•y field v√† value t·ª´ t·ª´ng object
      if (field === 'title') {
        htmlContent += `<h3>${textOutput(value)}</h3>`;
      } else if (field === 'content') {
        htmlContent += `<p>${textOutput(value)}</p>`;
      } else if (field === 'image') {
        htmlContent += `
                <div class="posts-img skeleton-active">
                    <img src="${value}" alt="${value}" onload="removeSkeleton(this)" onerror="handleImageError(this)" />
                </div>`;
      }
    }

    dataContainer.innerHTML = htmlContent; // Hi·ªÉn th·ªã n·ªôi dung v√†o div tbody
  } catch (error) {
    shows_error();
  }
}

function shows_error() {
  document.getElementById('posts-content').innerHTML = '';
  document.getElementById('posts-content').innerHTML = `
    <div class="error-noti">
      <h1>B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i</h1>
      <button onclick="Return_home()">Return üè†</button>
    </div>
    `;
}

function Return_home() {
  // window.location.href = "/";
  document.body.style.transition = "opacity 1s";
  document.body.style.opacity = 0;
  setTimeout(() => {
    window.location.href = '/';
  }, 1000);
}

///////////////////////////////////////////////////////////////////////////////////
function updateBox2Height() {
  const calc = 70;
  const box1 = document.querySelector('.calc-posts');
  const box2 = document.querySelector('.calc-list');
  box2.style.height = `${calc + box1.offsetHeight}px`;
}

const observer = new ResizeObserver(updateBox2Height);
observer.observe(document.querySelector('.calc-posts'));

//////////////////////////////////////////////////////////////////////////////

function show_topic() {
  const show_topic = document.getElementById('posts-content');
  show_topic.innerHTML = `
    <h2>Breaking News</h2>
    <div class="calc-posts" id="topic-content"></div>`;
  topic_content();
}

async function topic_content() {
  let count = 0;
  const response = await fetch(`${databaseUrl}/news.json`);
  const news = await response.json();
  const newsArray = Object.entries(news || {}).map(([id, item]) => ({
    id,
    ...item,
  }));

  newsArray.sort((a, b) => b.timestamp - a.timestamp);

  const container = document.getElementById('topic-content');
  container.innerHTML = '';

  let contentHTML = '';
  for (let article of newsArray) {
    if (count >= 20) break;
    if (article.topic == get_topic && article.status == 'public') {
      contentHTML += `
        <a href="./posts.html?topic=${article.topic}&id=${article.id}" class="news-item")">
          <div class="topic-item">
            <div class="topic-img skeleton-active">
              <img src="${article.summary}" onload="removeSkeleton(this)" onerror="handleImageError(this)" />
            </div>
            <div class="topic-text">
              <div>
                <h4 style="display: inline-block;">${textOutput(article.name)}</h4>
              </div>
            </div>
          </div>
        </a>
        `;
      count++;
    }
  }
  container.innerHTML = contentHTML;

}

//////////////////////////////////////////////////////////////////////////////////////

function show_next_content() {
  const show_hots = document.getElementById(get_topic + '-section');
  show_hots.innerHTML = `
    <div class="section-title">
      <h2>Ti·∫øp theo</h2>
      <div class="carousel-buttons">
        <button class="carousel-button left" onclick="moveCarousel_next_content(-1)">&#10094;</button>
        <button class="carousel-button right" onclick="moveCarousel_next_content(1)">&#10095;</button>
      </div>
    </div>
    <div class="carousel-container">
      <div class="carousel" id="${get_topic}-carousel"></div>
    </div>`;
  next_content();
}

const carousel_next_content = document.getElementById(get_topic + '-carousel'); // L·∫•y ph·∫ßn t·ª≠ bƒÉng chuy·ªÅn
let currentIndex_next_content = 0; // Ch·ªâ s·ªë hi·ªán t·∫°i c·ªßa bƒÉng chuy·ªÅn

// H√†m d·ªãch chuy·ªÉn bƒÉng chuy·ªÅn
function moveCarousel_next_content(direction) {
  const itemsVisible = 4; // S·ªë m·ª•c hi·ªÉn th·ªã c√πng l√∫c
  const totalItems = document.querySelectorAll('.topic-carousel-item').length; // T·ªïng s·ªë m·ª•c trong bƒÉng chuy·ªÅn

  currentIndex_next_content += direction; // C·∫≠p nh·∫≠t ch·ªâ s·ªë theo h∆∞·ªõng di chuy·ªÉn

  // ƒê·∫£m b·∫£o ch·ªâ s·ªë kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
  if (currentIndex_next_content < 0) {
    currentIndex_next_content = 0;
  } else if (currentIndex_next_content > totalItems - itemsVisible) {
    currentIndex_next_content = totalItems - itemsVisible;
  }

  const offset = currentIndex_next_content * -25; // T√≠nh to√°n kho·∫£ng c√°ch d·ªãch chuy·ªÉn (25% m·ªói m·ª•c)
  carousel_next_content.style.transform = `translateX(${offset}%)`; // √Åp d·ª•ng d·ªãch chuy·ªÉn cho bƒÉng chuy·ªÅn
}

// H√†m l·∫•y d·ªØ li·ªáu b√†i vi·∫øt t·ª´ database v√† hi·ªÉn th·ªã
async function next_content() {
  let count = 0; // B·ªô ƒë·∫øm s·ªë b√†i vi·∫øt ƒë∆∞·ª£c th√™m
  const response = await fetch(`${databaseUrl}/news.json`); // G·ª≠i y√™u c·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ database
  const news = await response.json(); // Chuy·ªÉn ƒë·ªïi ph·∫£n h·ªìi JSON th√†nh object
  const newsArray = Object.entries(news || {}).map(([id, item]) => ({
    id,
    ...item,
  })); // Chuy·ªÉn object th√†nh m·∫£ng ƒë·ªÉ d·ªÖ x·ª≠ l√Ω

  newsArray.sort((a, b) => b.timestamp - a.timestamp); // S·∫Øp x·∫øp b√†i vi·∫øt theo th·ªùi gian gi·∫£m d·∫ßn

  let contentHTML = ''; // Chu·ªói ch·ª©a n·ªôi dung HTML

  for (let article of newsArray) {
    if (count >= count_sub_post) break; // Ch·ªâ l·∫•y t·ªëi ƒëa s·ªë b√†i vi·∫øt cho ph√©p

    // Ch·ªâ l·∫•y c√°c b√†i vi·∫øt thu·ªôc ch·ªß ƒë·ªÅ ch√≠nh tr·ªã v√† c√¥ng khai
    if (article.topic === get_topic && article.status === 'public' && article.id !== postId) {
      contentHTML += `
        <a href="posts.html?topic=${article.topic}&id=${article.id}" class="topic-carousel-item carousel-item")">
          <div class="cursor-item">
            <div class="section-img skeleton-active">
              <img src="${article.summary}" alt="${article.name}" onload="removeSkeleton(this)" onerror="handleImageError(this)" />
            </div>
            <div class="section-text">
              <div>
                <h4>${textOutput(article.name)}</h4>
              </div>
              <small>${new Date(article.timestamp).toLocaleDateString()}</small>
            </div>
          </div>
        </a>
      `;
      count++; // TƒÉng b·ªô ƒë·∫øm
    }
  }

  carousel_next_content.innerHTML = contentHTML; // G√°n n·ªôi dung HTML m·ªôt l·∫ßn
}

//////////////////////////////////////////////////////////////////////////////////////////////////

function show_list() {
  const show_list = document.getElementById('list-section');
  show_list.innerHTML = `
    <h2>Latest News</h2>
    <div class="calc-list" id="get-data-list"></div>`;
  list();
}

async function list() {
  const response = await fetch(`${databaseUrl}/news.json`);
  const news = await response.json();
  const newsArray = Object.entries(news || {}).map(([id, item]) => ({
    id,
    ...item,
  }));

  newsArray.sort((a, b) => b.timestamp - a.timestamp);

  const container = document.getElementById('get-data-list');
  container.innerHTML = '';

  let contentHTML = '';
  for (let article of newsArray) {
    if (article.id !== postId && article.status !== 'hide' && article.topic !== get_topic) {
      contentHTML += `
        <a href="./posts.html?id=${article.id}" class="news-item">
          <div class="list-news-item">
            <div class="list-news-img skeleton-active">
              <img src="${article.summary}" onload="removeSkeleton(this)" onerror="handleImageError(this)" />
            </div>
            <div class="list-news-text">
              <div>
                <h4 style="display: inline-block;">${textOutput(article.name)}</h4>
              </div>
              <small>${new Date(article.timestamp).toLocaleDateString()}</small>
            </div>
          </div>
        </a>
      `;
    }
  }
  container.innerHTML = contentHTML;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// H√†m x√≥a skeleton loader sau khi ·∫£nh t·∫£i xong
function removeSkeleton(img) {
  const imgContainer = img.parentElement;
  imgContainer.classList.remove('skeleton-active'); // X√≥a skeleton
  img.style.display = 'block'; // Hi·ªÉn th·ªã ·∫£nh
}

// H√†m x·ª≠ l√Ω khi ·∫£nh b·ªã l·ªói


function handleImageError(img) {
  setTimeout(() => skeleton_error(img), 5000); // delay 5s khi kh√¥ng th·ªÉ l·∫•y ·∫£nh 
}

function skeleton_error(img) {
  const imgContainer = img.parentElement;
  imgContainer.classList.remove('skeleton-active'); // X√≥a skeleton
  img.style.display = 'none'; // ·∫®n ·∫£nh b·ªã l·ªói

  imgContainer.innerHTML = `
  <div 
    style=" display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    background-color: #f0f0f0;
    color: #aaa;
    font-size: 14px;
    border-radius: 8px;">
    Image Error
  </div>`;
}

// L·∫•y ph·∫ßn t·ª≠ button
const moveToTopBtn = document.getElementById('moveToTop');

// Theo d√µi s·ª± ki·ªán cu·ªôn
window.onscroll = function () {
  if (document.documentElement.scrollTop > 200) {
    moveToTopBtn.classList.add('show'); // Hi·ªán n√∫t v·ªõi hi·ªáu ·ª©ng
  } else {
    moveToTopBtn.classList.remove('show'); // ·∫®n n√∫t v·ªõi hi·ªáu ·ª©ng
  }
};

// Th√™m s·ª± ki·ªán click cho n√∫t
function moveToTop() {
  scrollToTop(500); // G·ªçi h√†m cu·ªôn m∆∞·ª£t trong 2 gi√¢y
};

// H√†m cu·ªôn l√™n v·ªõi animation trong 2 gi√¢y
function scrollToTop(duration) {
  const start = document.documentElement.scrollTop || document.body.scrollTop;
  const startTime = Date.now();

  function animateScroll() {
    const currentTime = Date.now();
    const elapsed = currentTime - startTime; // Th·ªùi gian ƒë√£ tr√¥i qua
    const progress = Math.min(elapsed / duration, 1); // Ti·∫øn ƒë·ªô (t·ªëi ƒëa 1)

    // T√≠nh to√°n v·ªã tr√≠ cu·ªôn hi·ªán t·∫°i
    const currentScroll = start * (1 - progress);
    document.documentElement.scrollTop = currentScroll;
    document.body.scrollTop = currentScroll;

    // D·ª´ng l·∫°i n·∫øu ƒë√£ ho√†n t·∫•t
    if (progress < 1) {
      requestAnimationFrame(animateScroll);
    }
  }
  requestAnimationFrame(animateScroll);
}
